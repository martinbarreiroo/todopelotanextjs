/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/uerq92hWcU2
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Button } from "@/components/ui/button";
import {
  SheetTrigger,
  SheetTitle,
  SheetDescription,
  SheetHeader,
  SheetClose,
  SheetContent,
  Sheet,
} from "@/components/ui/sheet";
import { Textarea } from "@/components/ui/textarea";
import { useEffect, useState } from "react";
import { DialogDeleteMessage } from "./DialogDeleteMessage";

function Forum() {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [tournamentAdminId, setTournamentAdminId] = useState("");
  const [userId, setUserId] = useState("");

  useEffect(() => {
    const fetchTournamentMessages = async () => {
      const tournamentId = localStorage.getItem("tournamentId");
      const token = localStorage.getItem("token");
      setUserId(localStorage.getItem("userId"));
      setTournamentAdminId(localStorage.getItem("tournamentAdminId"));
      console.log(userId);
      console.log(tournamentAdminId);
      const response = await fetch(
        `http://localhost:8080/messages/get/${tournamentId}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        setMessages(data);
      } else {
        console.error("Failed to fetch tournament messages");
      }
    };

    fetchTournamentMessages(); // Call the fetchTournamentPositions function
    // Then call it every second
    const intervalId = setInterval(fetchTournamentMessages, 1000);

    // Clear the interval when the component unmounts
    return () => clearInterval(intervalId);
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    const tournamentId = localStorage.getItem("tournamentId");
    const token = localStorage.getItem("token");
    const authorId = localStorage.getItem("tournamentAdminId"); // Assuming authorId is stored in localStorage
    const timestamp = new Date().toISOString(); // Current date and time in ISO format

    const response = await fetch(
      `http://localhost:8080/messages/create/${tournamentId}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          content: newMessage,
          authorId: authorId,
          timestamp: timestamp,
        }),
      }
    );

    if (response.ok) {
      const data = await response.json();
      setMessages((oldMessages) => [...oldMessages, data]);
      setNewMessage("");
    } else {
      console.error("Failed to post message");
    }
  };

  const handleDelete = async (messageId) => {
    const token = localStorage.getItem("token");
    const response = await fetch(
      `http://localhost:8080/messages/delete/${messageId}`,
      {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`, // replace with your token
        },
      }
    );
  
    if (response.ok) {
      // remove the message from the local state
      setMessages(messages.filter((message) => message.id !== messageId));
    } else {
      // handle error
      console.error("Failed to delete message");
    }
  };

  return (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          className="bg-dark-green hover:bg-custom-green"
          variant="outline"
        >
          Open Forum
        </Button>
      </SheetTrigger>
      <SheetContent side="left" className="flex flex-col">
        <SheetHeader>
          <SheetTitle>Forum</SheetTitle>
          <SheetDescription>
            The Admin can post messages here for all participants to see.
          </SheetDescription>
        </SheetHeader>
        <div className="flex-grow overflow-auto">
          {messages.slice().reverse().map((message) => (
            <div
              key={message.id}
              className="grid grid-cols-[auto_1fr] items-start gap-4 mb-6"
            >
              <div className="grid gap-1">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="bg-dark-green text-white rounded-full w-8 h-8 flex items-center justify-center">
                      {message.authorUsername[0].toUpperCase()}
                    </div>
                    <p className="ml-2 text-sm font-medium">
                      {message.authorUsername}
                    </p>
                  </div>
                  {tournamentAdminId === userId && (
                    <DialogDeleteMessage
                      handleDeleteMessage={() => handleDelete(message.id)}
                    />
                  )}
                </div>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {message.content}
                </p>
                <p className="text-xs text-gray-400">
                  {new Date(message.timestamp).toLocaleString()}
                </p>
              </div>
            </div>
          ))}
        </div>

        {tournamentAdminId === userId && (
          <div className="grid gap-4 py-4">
            <form
              className="grid grid-cols-4 items-start gap-4"
              onSubmit={handleSubmit}
            >
              <div className="col-span-4">
                <Textarea
                  className="min-h-[100px]"
                  id="message"
                  placeholder="Write your message here..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                />
              </div>
              <div className="col-span-4 flex justify-end">
                <Button
                  className="bg-dark-green hover:bg-custom-green"
                  type="submit"
                >
                  Post Message
                </Button>
              </div>
            </form>
          </div>
        )}
      </SheetContent>
    </Sheet>
  );
}

export { Forum };
